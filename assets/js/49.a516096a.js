(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{374:function(n,t,u){"use strict";u.r(t);var r=u(0),e=Object(r.a)({},(function(){var n=this,t=n._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"闭包函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#闭包函数"}},[n._v("#")]),n._v(" 闭包函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("/**\n * 闭包函数示例\n * @param {number} num - 输入的数字\n * @returns {function} - 返回一个闭包函数\n */\nfunction closureFunction(num) {\n  /**\n   * 闭包函数\n   * @param {number} x - 输入的数字\n   * @returns {number} - 返回输入的数字与闭包函数外部变量num的和\n   */\n  return function(x) {\n    return num + x;\n  };\n}\n\n// 示例调用\nconst closure = closureFunction(5);\nconsole.log(closure(10)); // 输出 15\nconsole.log(closure(-5)); // 输出 0\n")])])]),t("p",[n._v("以上代码实现了一个闭包函数，函数名称为closureFunction。该函数接受一个参数num，并返回一个闭包函数。")]),n._v(" "),t("p",[n._v("闭包函数是一个匿名函数，它在内部访问了外部函数closureFunction的局部变量num。闭包函数接受一个参数x，并返回num + x的值。通过闭包，我们可以保留closureFunction的局部变量，使其在闭包函数被调用时仍然有效。")]),n._v(" "),t("p",[n._v("示例调用展示了如何使用闭包函数。首先，我们使用closureFunction传入参数5初始化了一个闭包函数，然后通过该闭包函数分别计算了10和-5与5的和，得到了15和0的结果")])])}),[],!1,null,null,null);t.default=e.exports}}]);