(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{367:function(n,e,t){"use strict";t.r(e);var l=t(0),s=Object(l.a)({},(function(){var n=this._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[this._v('/**\n * 泛型类\n */\nclass GenericClass<T> {\n  private value: T;\n\n  constructor(value: T) {\n    this.value = value;\n  }\n\n  /**\n   * 返回成员变量值\n   */\n  getValue(): T {\n    return this.value;\n  }\n\n  /**\n   * 设置成员变量值\n   */\n  setValue(value: T): void {\n    this.value = value;\n  }\n}\n\n/**\n * 泛型函数\n */\nfunction genericFunction<T>(value: T): T {\n  return value;\n}\n\n// 使用泛型类\nconst genericObj = new GenericClass<number>(10);\nconsole.log(genericObj.getValue()); // 输出：10\n\ngenericObj.setValue(20);\nconsole.log(genericObj.getValue()); // 输出：20\n\n// 使用泛型函数\nconst result = genericFunction<string>("Hello, World!");\nconsole.log(result); // 输出：Hello, World!\n')])])]),n("p",[this._v("以上代码是基于用户需求提供的typescript泛型例子，包含了泛型类和泛型函数的示例。具体的代码实现如下：")]),this._v(" "),n("p",[this._v('泛型类(GenericClass): 这个类接受一个类型参数T作为成员变量的类型。类中有两个方法：getValue()用于返回成员变量的值，setValue(value: T)用于设置成员变量的值。\n泛型函数(genericFunction): 这个函数也接受一个类型参数T作为参数类型和返回值类型。函数内部简单地将传入的参数返回。\n代码中使用了泛型类来创建一个对象genericObj，并对其进行了测试。首先，将数字10传入泛型类的构造函数并保存在成员变量中，然后调用getValue()方法打印出成员变量的值。接着，调用setValue()方法将数字20设置为新的成员变量值，再次调用getValue()方法打印出最新的成员变量值。最后，使用泛型函数genericFunction传入字符串"Hello, World!"并将返回值打印出来。')])])}),[],!1,null,null,null);e.default=s.exports}}]);